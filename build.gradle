import org.gradle.internal.os.OperatingSystem
plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

group = 'com.github.vertexvolcani'
version = 'ALPHA-2.1'

repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

var Log4jVersion = "2.22.0"
project.ext.lwjglVersion = "3.3.3"
project.ext.jomlVersion = "1.10.5"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if  (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if  (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

dependencies {
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j2-impl
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl', version: Log4jVersion
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: Log4jVersion
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: Log4jVersion
    // https://mvnrepository.com/artifact/de.javagl/obj
    implementation group: 'de.javagl', name: 'obj', version: '0.4.0'


    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-shaderc"
    implementation "org.lwjgl:lwjgl-spvc"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-vma"
    implementation "org.lwjgl:lwjgl-vulkan"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-shaderc::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-spvc::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
    if (lwjglNatives == "natives-macos" || lwjglNatives == "natives-macos-arm64") runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"
    implementation "org.joml:joml:${jomlVersion}"
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'com.github.vertexvolcani.test.DynamicTriangleDemo'
    }
}

publishing {
    publications {
        VertexVolcani(MavenPublication) {
            artifactId = 'vertexvolcani'
            from components.java
            pom {
                name = 'VertexVolcani'
                description = 'A concise description of my library'
                url = 'https://github.com/pheonixfirewingz/VertexVolcaniJava'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'lukes'
                        name = 'Luke Shore'
                        email = 'Luke.A.shore@proton.me'
                    }
                }
                scm {
                    connection = 'scm:git:git:https://github.com/pheonixfirewingz/VertexVolcaniJava.git'
                    developerConnection = 'scm:git:ssh:git@github.com:pheonixfirewingz/VertexVolcaniJava.git'
                    url = 'https://github.com/pheonixfirewingz/VertexVolcaniJava'
                }
            }
        }
    }

    repositories {
        maven {
            url = uri("https://maven.pkg.github.com/pheonixfirewingz/VertexVolcaniJava")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}